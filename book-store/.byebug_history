c
price += 8 if bundle.is_a?(Integer) && next
price
bundle
c
break 77
combination
c
combination
Bundles.for(basket)
bundle
c
Bundles.for(basket)
c
[1,2,3,4].each_with_object({}).with_index {|result| p result}
[1,2,3,4].each_with_object({}).with_index {|result| puts result}
[1,2,3,4].each_with_object({}).with_index {|result| puts *result}
[1,2,3,4].each_with_object({}).with_index
c
expected == Bundles.for(basket)
c
result = Bundles.for(basket).first.first
result = Bundles.for(basket).first.first.class
result = Bundles.for(basket).first
result = Bundles.for(basket).first.class
result = Bundles.for(basket)
expected == Bundles.for(basket)
expected == [[[1, 2], [1]], [[1], [1, 2]]]
[[[1, 2], [1]], [[1], [1, 2]]]
Bundles.for(basket).class
expected
expect
expected = [[1,2], [1]], [[1], [1,2]]
expected = [[[1,2], [1]], [[1], [1,2]]
Bundles.for(basket)
c
temp = [[1],[1]]
temp = [[1c],[1]]
temp
c
old_result
c
old_result
c
temp
c
possible_bundles.count
old_result
temp
c
index = temp.find_index possible_bundle
temp.class
temp
new_result
old_result
result
c
temp
result
c
result
temp[index]
index = temp.find_index possible_bundle
result
temp
c
result
temp
c
result
c
temp
temp[index] << book
temp
temp[index]
index = temp.find_index possible_bundle
possible_bundles.last.id
possible_bundles.first.id
possible_bundles.first.index
possible_bundles.first.class
possible_bundles
index = temp.find_index possible_bundle
temp
result
