c
players.last.paths.first.pieces_visited.map(&:type).uniq
players.last.paths
player_x.paths
player_x = players.first
players.first.type
result
c
result
c
result
exit
c
exit
c
path
c
path
exit
c
cc
c
le_nodes
le_nodes.for 'x'
le_nodes.for 'X'
@players.first.send :starting_nodes
c
@players.first.send :starting_nodes
@players.first.starting_send :nodes
@players.first.starting_nodes
@players.first
c
game.did_x_win?
c
game.did_x_win?
c
results.first.current_node
results.first.nodes_visited
results.first.current_node
a
a = [] << 1
results.last.current_node
results.size
results.first.current_node
results.first
results.first.to_json
puts JSON.pretty_generate results.map(&:inspect).to_json
puts JSON.pretty_generate results.to_json
require 'json'
puts JSON.pretty_generate results.to_json
pp results.map(&:inspect)
puts results.map(&:inspect)
puts results
results = XPath.traverse(game.node_at(Coordinate.new(3,0)), 3, game)
results = _
XPath.traverse(game.node_at(Coordinate.new(3,0)), 3, game)
game.node_at Coordinate.new 3,0
game.node_at Coordinate.new 2,0
game.node_at Coordinate.new 3,0
game.node_at Coordinate 3,0
game.did_x_win?
c
XPath.traverse(node, (width - 1), self).any?(&:reached_end?)
